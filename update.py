#!/usr/bin/env python3
import os
import re
from datetime import datetime

def get_numberic_index(filename):
    #Extract numeric index from the file name using regular expression
    match = re.match(r'^(\d+)-', filename)
    return int(match.group(1)) if match else float('inf')

# Find all *.md files except README.md and 0-template.md
filenames = [f for f in os.listdir() if f.endswith(".md") and f not in ["README.md", "0-template.md"]]
files = sorted(filenames, key=get_numberic_index)

# Generate markdown documents entries
doc_entries = "\n\n"
doc_entries += f"> Generated by `python3 update.py` @ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
doc_entries += "\n"

mkdoc_entries = "\n"

for file in files:
    mkdoc_entries += f"    - {file}\n"
    with open(file, 'r', encoding="utf-8") as f:
        lines = f.readlines()
        if lines:
            index = file.replace('.md', '').split('-')[0]
            description = lines[0].lstrip('# ').strip()
            row = f"- [{index}. {description}]({file})\n"
            doc_entries += row

def find_and_replace(fpath, start, end, replace):
    if os.path.isfile(fpath) == False:
        print("{fpath} file not exist!")
        return
    # Read the existing fpath content
    with open(fpath, 'r', encoding="utf-8") as handle_file:
        orig_handle = handle_file.read()

    # Update content below ## Documents
    start_index = orig_handle.find(start) + len(start)
    end_index = orig_handle.find(end, start_index)
    updated_handle = orig_handle[:start_index] + replace + orig_handle[end_index:]


    # Write the updated content back to fpath
    with open(fpath, 'w', encoding="utf-8") as handle_file:
        handle_file.write(updated_handle)

    print(f"Updated in {fpath}")

find_and_replace("README.md", "## Documents", "##", doc_entries)
find_and_replace("mkdocs.yml", "README.md", "exclude", mkdoc_entries)
